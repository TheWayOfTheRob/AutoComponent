import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.zip.ZipException

plugins {
    id 'com.github.johnrengelman.shadow' version '2.0.4'
    id 'org.jetbrains.kotlin.jvm'
    id 'org.jetbrains.kotlin.kapt'
    id 'org.jetbrains.dokka'
}

// disable default jar tasks
//configurations.runtime.artifacts.removeAll { it.archiveTask.is jar }
tasks.getByName('jar').enabled = false

// create extra configuration for shaded dependencies, so they're not included in the pom
def shadedConfig = configurations.create('compileShaded')
configurations.compileOnly.extendsFrom(shadedConfig)

shadowJar {
    classifier = ''
    configurations = [shadedConfig]

    relocate 'com.squareup.javapoet', 'autocomponent.shaded.com.squareup.javapoet'
    relocate 'com.google', 'autocomponent.shaded.com.google'
    relocate 'afu', 'autocomponent.shaded.afu'
    relocate 'org', 'autocomponent.shaded.org'
    exclude 'javax/**'
}

artifacts {
    runtime shadowJar
    archives shadowJar
}

dependencies {
    kapt deps.apt.autoService
    compileOnly deps.apt.autoService

    compile project(':autocomponent-annotation')

    compileShaded deps.apt.autoCommon
    compileShaded(deps.misc.javapoet) {
        transitive = false
    }
    compileOnly(deps.misc.dagger) {
        transitive = false
    }
    compile deps.misc.kotlinxMetadata
    compile deps.kotlin.reflect
    compile deps.kotlin.stdlibjdk8
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs = ['-Xjsr305=strict', '-progressive']
    }
}

class VerifyShadowTask extends DefaultTask {

    private static
    final Set<String> ALLOWED_JAR_ENTRIES = new LinkedHashSet<>(Arrays.asList("io/", "autocomponent/", "META-INF/"))

    @TaskAction
    void check() {
        getLogger().debug("Verifying shadowJar contents")
        File jar = project.file("${project.buildDir}/libs")
                .listFiles()
                .find { File file ->
            file.name.endsWith(".jar") && !file.name.contains("-javadoc") && !file.name.contains("-sources")
        }

        if (jar == null) {
            throw new RuntimeException("Jar not found!")
        }

        try {
            JarFile jarFile = new JarFile(jar)
            jarFile.entries().each { JarEntry entry ->
                if (!ALLOWED_JAR_ENTRIES.any { entry.getName().startsWith(it) }) {
                    throw new RuntimeException("Jar contains unexpected entry: \"${entry.getName()}\"")
                }
            }
        } catch (ZipException e) {
            throw new RuntimeException("Couldn't open ${jar.name}", e)
        }
    }
}

task verifyShadow(type: VerifyShadowTask, dependsOn: shadowJar)
tasks.check.dependsOn(verifyShadow)

apply from: rootProject.file('gradle/gradle-mvn-push.gradle')